// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student Student?
  parent  Parent?
  faculty Faculty?

  @@map("users")
}

model Student {
  id         String   @id @default(cuid())
  userId     String   @unique
  rollNumber String   @unique
  name       String
  department String
  year       Int
  parentId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent           Parent            @relation(fields: [parentId], references: [id])
  leaveApplications LeaveApplication[]
  leaveHistory     LeaveHistory[]

  @@map("students")
}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]

  @@map("parents")
}

model Faculty {
  id         String   @id @default(cuid())
  userId     String   @unique
  employeeId String   @unique
  name       String
  department String
  designation String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveApplications LeaveApplication[]

  @@map("faculty")
}

model LeaveApplication {
  id                  String           @id @default(cuid())
  studentId           String
  facultyId           String
  startDate           DateTime
  endDate             DateTime
  reason              String
  status              LeaveStatus      @default(PENDING)
  parentApprovalStatus ParentApprovalStatus @default(PENDING)
  facultyComments     String?
  parentComments      String?
  attachmentUrl       String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Relations
  student      Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  faculty      Faculty       @relation(fields: [facultyId], references: [id])
  notifications Notification[]
  leaveHistory LeaveHistory?

  @@map("leave_applications")
}

model LeaveHistory {
  id                String      @id @default(cuid())
  leaveApplicationId String      @unique
  studentId         String
  action            String      // "APPROVED", "REJECTED", "CANCELED"
  performedBy       String      // "FACULTY", "PARENT", "STUDENT"
  comments          String?
  createdAt         DateTime    @default(now())

  // Relations
  leaveApplication LeaveApplication @relation(fields: [leaveApplicationId], references: [id], onDelete: Cascade)
  student          Student           @relation(fields: [studentId], references: [id])

  @@map("leave_history")
}

model Notification {
  id                String   @id @default(cuid())
  leaveApplicationId String
  recipientId       String
  recipientType     RecipientType
  type              NotificationType
  title             String
  message           String
  isRead            Boolean  @default(false)
  createdAt         DateTime @default(now())

  // Relations
  leaveApplication LeaveApplication @relation(fields: [leaveApplicationId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserRole {
  STUDENT
  PARENT
  FACULTY
  ADMIN
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum ParentApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  NOT_REQUIRED
}

enum RecipientType {
  STUDENT
  PARENT
  FACULTY
}

enum NotificationType {
  LEAVE_SUBMITTED
  LEAVE_APPROVED
  LEAVE_REJECTED
  LEAVE_CANCELED
  PARENT_APPROVAL_REQUIRED
  PARENT_APPROVED
  PARENT_REJECTED
}
